SHELL := bash

# Name of the final executable, to be put in $(BINDIR)
PRODUCT := calculator

BINDIR :=
INCDIR := inc/
SRCDIR := src/
OBJDIR := bin/

CXX := g++
LINKER := g++
INCDIRS := -I inc
CXXFLAGS := -std=c++0x -Wall -Wextra -g
LIBS := -lmpfr

# GNU Make wildcard function generates list of .cpp files
SRCFILES := $(wildcard $(SRCDIR)*.cpp)
# GNU Make patsubst creates list of .o files from source files
OBJFILES := $(patsubst $(SRCDIR)%.cpp,$(OBJDIR)%.o,$(SRCFILES))
# Here, the same thing is done to get a list of dependency files
DEPFILES := $(patsubst $(SRCDIR)%.cpp,$(OBJDIR)%.d,$(SRCFILES))

# First target is the default - links executable files together
# $^ refers to all prerequisites, $@ to the target of the rule
$(BINDIR)$(PRODUCT): $(OBJFILES)
	$(LINKER) $(CXXFLAGS) $^ $(LIBS) -o $@

# Clean the project by removing all object files and executable
clean:
	rm -f $(OBJDIR)*.o $(BINDIR)$(PRODUCT)

# Remove dependency files and rebuild all dependencies
depends:
	rm -f $(OBJDIR)*.d
	$(MAKE) $(DEPFILES)

# How to build a .o file from a .cpp file
# $< refers to the first prerequisite only
$(OBJDIR)%.o: $(SRCDIR)%.cpp
	$(CXX) $(CXXFLAGS) $(INCDIRS) -c $< -o $@

# How to build .d files
# -MM option says to generate dependencies (though not for, say, <iostream>)
#  sed is then used to change lines like:
#      main.o: src/main.cpp inc/dice.h inc/report.h
#  to lines like:
#      obj/main.d obj/main.o: src/main.cpp inc/dice.h inc/report.h
#  tr is used to remove backslashes and EOL characters generated by GCC
$(OBJDIR)%.d: $(SRCDIR)/%.cpp
	$(CXX) $(INCDIRS) -MM $< \
	    | tr '\n\r\\' ' ' \
	    | sed -e 's%^%$@ %' -e 's% % $(OBJDIR)%'\
	    > $@

# Pastes in the dependency files here, which read as simple rules
# There can be multiple rules for one target, make will merge prerequisites
# If the files don't exist, make will produce them using the last rule
-include $(DEPFILES)

